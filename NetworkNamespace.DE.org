#+TITLE: Virtual network with Openswitch
#+AUTHOR: Sebastian Meisel

:HTML_PROPERTIES:
#+OPTIONS: num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="mystyle.css" />
:END:


* Virtuelle Netzwerke mit Openswitch und Linux Netzwerk-Namespaces
:PROPERTIES:
:header-args:bash: :shebang #!/bin/bash :tangle files/ovs.sh :eval never :session OVS :exports code
:header-args:mermaid: :tangle nil :results file :exports results
:header-args:javascript: :tangle script.js :exports none
:header-args:css: :tangle mystyle.css :exports none
:END:

#+NAME: toggle-mode-script
#+BEGIN_EXPORT HTML
<input type="checkbox" id="darkmode-toggle">
<label for="darkmode-toggle"></label></input>
<script src="script.js"></script>
#+END_EXPORT

#+BEGIN_SRC javascript

document.addEventListener('DOMContentLoaded', function() {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.documentElement.setAttribute('data-theme', 'dark');
  }
});

// Toggle dark mode
function toggleDarkMode() {
  console.log("hallo");
  const currentTheme = document.documentElement.getAttribute('data-theme');
  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
  document.documentElement.setAttribute('data-theme', newTheme);
  localStorage.setItem('theme', newTheme);
}

const body = document.querySelector('#darkmode-toggle').addEventListener('click', toggleDarkMode)
#+END_SRC



#+NAME: toggle-mode-css
#+BEGIN_SRC css
:root {
  /* Light mode colors */
  --background-color: #ffffff;
  --text-color: #000000;
  --primary-color: #0000ff;
  --secondary-color: #008000;
  --highlight-color: #ff0000;
  --code-background-color: #f0f0f0;
  --border-color: #cccccc;
  --tag-background-color: #cccccc;
  --code-color: #ff00ff;
}

:root[data-theme="dark"] {
  --background-color: #1f1f1f;
  --text-color: #c7c7c7;
  --primary-color: #6a9fb5;
  --secondary-color: #b5b5b5;
  --highlight-color: #f0c674;
  --code-background-color: #262626;
  --border-color: #333333;
  --tag-background-color: #3f3f3f;
  --code-color: #d80ffc;
}

/* Default to light mode */
body {
  background-color: var(--background-color);
  color: var(--text-color);
}


.title  { color: var(--primary-color);}
.subtitle { color: var(--secondary-color); }
.todo   { color: red; } /* Keeping specific colors for statuses */
.done   { color: green; }
.priority { color: orange; }
.tag    { background-color: var(--tag-background-color); }

.timestamp, .timestamp-kwd { color: var(--highlight-color); }

pre {
  border: 1px solid var(--border-color);
  background-color: var(--code-background-color);
  color: var(--code-color);
  font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
  font-size: 16px;
}

code {
  color: var(--code-color);
  font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
  font-size: 16px;
}

label {
    width: 50px;
    height: 20px;
    position: absolute;
    top: 50px;
    left: 100px;
    display: block;
    background: #ebebeb;
    border-radius: 20px;
    box-shadow: inset 0px 1px 2px rgba(0,0,0,0.4), inset 0px -1px 2px rgba(255,255,255,0.4);
    cursor: pointer;
    transition: 0.3s;
}

label:after {
    content: "";
    width: 18px;
    height: 18px;
    position: absolute;
    top: 1px;
    left:1px;
    background: linear-gradient(180deg, #ffcc89, #d8860b);
    border-radius: 18px;
    box-shadow: 0px 1px 2px rgba(0,0,0,0.2);
    transition: 0.3s;t
}


input {
    width: 0;
    height: 0;
    visibility: hidden;
    position: absolute;
    top: 50px;
    left: 100px;
}

input:checked + label {
    background: #242424;
}
input:checked +label::after {
    left: 49px;
    transform: translateX(-100%);
    background: linear-gradient(180deg, #777, #3a3a3a);
}
#+END_SRC


In diesem Projekt möchte ich zeigen, wie man ein virtuelles Netzwerk unter Linux mithilfe von Openvswitch und Netzwerk-Namespaces entwirft und implementiert. Durch die Nutzung virtueller Ethernet-Tunnel und eines zentralen virtuellen Switches schaffen wir eine flexible und skalierbare Netzwerkumgebung. Dieses Projekt zielt darauf ab, die Möglichkeiten virtueller Netzwerktechnologien zu demonstrieren und ein praktisches Beispiel für Bildungszwecke bereitzustellen.

Das folgende Diagramm veranschaulicht den Aufbau eines virtuellen Netzwerks unter Verwendung von Openswitch. Der vSwitch dient als zentraler Punkt und verbindet drei verschiedene Netzwerk-Namespaces: red, green, blue. Jeder Namespace erhält eine IP-Adresse (=eth0-r=, =eth0-g=, =eth0-b=) innerhalb des Subnetzes =10.0.0.0/24= und ist über virtuelle Ethernet-Schnittstellen (=veth-r=, =veth-g=, =veth-b=) mit dem vSwitch verbunden.


#+BEGIN_SRC mermaid :file img/ovs-net.png
graph TD;
   subgraph "default"
     direction BT
     SW[(vSwitch)]  o--o veth-r & veth-g & veth-b
   end

   subgraph redNS
     red[eth0-r: 10.0.0.2] o---o veth-r
   end


   subgraph greenNS
     green[eth0-g: 10.0.0.3] o---o veth-g
   end

   subgraph blueNS
     blue[eth0-b: 10.0.0.4] o---o veth-b
   end


  classDef green fill:#9f6,stroke:#333,stroke-width:2px;
  class greenNS,veth-g green
  classDef red fill:#f69,stroke:#333,stroke-width:2px;
  class redNS,veth-r red
  classDef blue fill:#69f,stroke:#333,stroke-width:2px;
  class blueNS,veth-b blue
 #+END_SRC

#+CAPTION: Network Diagram 
#+NAME: fig:netdiag
#+ATTR_HTML: :width 50% :alt Netzwerkdiagramm, das die Beziehung zwischen den Namensräumen wie oben beschriebenen zeigt.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 700
#+RESULTS:
[[file:img/ovs-net.png]]

** Eine Funktion für jeden Namespace

Zunächst definieren wir Funktionen für jeden Netzwerk-Namensraum: grün, rot, orange (als Reserve für zukünftige Projekte) und blau. Diese Funktionen ermöglichen das Ausführen von Befehlen innerhalb der jeweiligen Namensräume unter Verwendung des Befehls =ip netns exec=. Jede Funktion ändert die Farbausgabe der ausgeführten Befehle zur besseren visuellen Identifizierung.



#+BEGIN_SRC bash
function green () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	echo -ne '\e[32m'
	ip netns exec green $@
	echo -ne '\e[0m'
    fi
    }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash
function red () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	echo -ne '\e[31m'
	ip netns exec red $@
	echo -ne '\e[0m'
    fi
    }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash
function orange () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	echo -ne '\e[33m'
	ip netns exec orange $@
	echo -ne '\e[0m'
    fi
    }
#+END_SRC

#+RESULTS:


#+BEGIN_SRC bash
function blue () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	echo -ne '\e[34m'
	ip netns exec blue $@
	echo -ne '\e[0m'
    fi
    }
#+END_SRC

** Namensräume erstellen

Der nächste Schritt besteht darin, die drei Netzwerk-Namensräume namens rot, grün und blau mit dem Befehl =ip netns add= zu initialisieren. Anschließend wird die Loopback-Schnittstelle innerhalb jedes Namensraums mit dem Befehl =ip l dev lo up= aktiviert, um die lokale Kommunikation innerhalb des Namensraums zu ermöglichen. Schließlich wird der aktuelle Zustand der Netzwerkschnittstellen innerhalb jedes Namensraums mit dem Befehl =ip l= angezeigt.

#+BEGIN_SRC bash
ip netns add red
ip netns add green
ip netns add blue
#+END_SRC

#+BEGIN_SRC bash
red ip l dev lo up
green ip l dev lo up
blue ip l dev lo up
#+END_SRC

#+BEGIN_SRC bash
red ip l
green ip l
blue ip l
#+END_SRC

** Tunnel erstellen

Nun erstellen wir virtuelle Ethernet-Tunnel (veth) namens =veth-r=, =veth-g= und =veth-b=, die jeweils mit einer Schnittstelle in ihrem jeweiligen Netzwerk-Namensraum (=eth0-r=, =eth0-g=, =eth0-b=) für die Kommunikation gekoppelt sind. Diese Tunnel erleichtern die Kommunikation zwischen dem vSwitch und den Netzwerk-Namensräumen.

#+BEGIN_SRC bash
ip link add veth-r type veth peer eth0-r
ip link add veth-g type veth peer eth0-g
ip link add veth-b type veth peer eth0-b
#+END_SRC

** Verknüpfung in Namensräume platzieren

Nachdem die Tunnel erstellt wurden, ist der nächste Schritt, die Schnittstellen ihren jeweiligen Namensräumen zuzuweisen. Dies wird erreicht, indem jedem Endpunkt eines Tunnels (=eth0-r=, =eth0-g=, =eth0-b=) sein entsprechender Namensraum (red, green, blue) zugeordnet wird.


#+BEGIN_SRC bash
ip link set eth0-r netns red
ip link set eth0-g netns green
ip link set eth0-b netns blue
#+END_SRC

** IPv4-Adressen hinzufügen

Schließlich werden IPv4-Adressen den Schnittstellen innerhalb jedes Namensraums zugewiesen, um die Netzwerkkommunikation zu ermöglichen. Die IP-Adressen =10.0.0.2=, =10.0.0.3= und =10.0.0.4= mit einer =/24= Subnetzmaske werden den Schnittstellen =eth0-r=, =eth0-g= und =eth0-b= jeweils zugewiesen. Zusätzlich werden die Schnittstellen aktiviert, um die Netzwerkkonfiguration zu aktivieren.


#+BEGIN_SRC bash
red ip address add 10.0.0.2/24 dev eth0-r
red ip link set dev eth0-r up
green ip address add 10.0.0.3/24 dev eth0-g
green ip link set dev eth0-g up
blue ip address add 10.0.0.4/24 dev eth0-b
blue ip link set dev eth0-b up
#+END_SRC


** Open Virtual Switch

*** Installieren
Um den virtuellen Switch einzurichten, wird zunächst das Openvswitch-Paket mithilfe des passenden Paketmanagers installiert. Anschließend wird der =ovs-vswitchd= Dienst gestartet, um den Switch zu verwalten.


#+BEGIN_SRC bash :eval never :tangle files/install_ovs.sh
if [ -f /etc/os-release ]; then
    . /etc/os-release
else
    echo "Cannot determine the Linux distribution."
    exit 1
fi
case $ID_LIKE in
    debian|ubuntu)
        apt install -y openvswitch-switch
        ;;
    fedora|rhel|centos)
        yum install -y openvswitch
        ;;
    suse)
        zypper install -y openvswitch
        ;;
    arch)
        pacman -Syu openvswitch
        ;;
    *)
        echo "Unsupported distribution."
        exit 1
        ;;
esac
#+END_SRC

#+BEGIN_SRC bash
systemctl start ovs-vswitchd.service
#+END_SRC

**** Virtuellen Switch hinzufügen

Nach der Installation wird ein virtueller Switch mit dem Namen =SW1= mithilfe des Befehls =ovs-vsctl add-br= erstellt. Die Switch-Konfiguration wird mithilfe des Befehls =ovs-vsctl show= angezeigt.

#+BEGIN_SRC bash
ovs-vsctl add-br SW1
ovs-vsctl show
#+END_SRC

*** Ports hinzufügen

Als nächstes werden Ports zum virtuellen Switch hinzugefügt, um ihn mit den Netzwerk-Namensräumen zu verbinden. Jeder Port ist mit einer entsprechenden Tunnel-Schnittstelle (=veth-r=, =veth-g=, =veth-b=) verbunden.


#+BEGIN_SRC bash
ovs-vsctl add-port SW1 veth-r
ovs-vsctl add-port SW1 veth-b
ovs-vsctl add-port SW1 veth-g
ovs-vsctl show
#+END_SRC

Diese Ports müssen nun noch aktiviert werden.

#+BEGIN_SRC bash
ip link set veth-r up
ip link set veth-g up
ip link set veth-b up
ip a | grep veth -A3
#+END_SRC

Conclusion

Zusammenfassend zeigt unsere virtuelle Netzwerkkonfiguration die Vielseitigkeit und Effizienz von softwaredefinierten Netzwerk (SDN)-Lösungen. Durch die Abstraktion von Netzwerkfunktionalitäten in virtualisierte Komponenten ermöglichen wir eine einfachere Verwaltung, erhöhte Flexibilität und eine bessere Ressourcennutzung. Dieses Projekt dient als Grundlage für weitere Erkundungen und Experimente im Bereich virtualisierter Netzwerkumgebungen.

Jetzt können Sie die verschiedenen Namensräume erkunden, indem Sie netzwerkbezogene Befehle mit den Funktionen =red()=, =blue()= und =green()= aufrufen, wie:

#+BEGIN_SRC bash
blue ip route
red ping 10.0.0.3 -c 5
green nstat -s | grep -i icmp
#+END_SRC



# Local Variables:
# jinx-languages: "de_DE"
# End:
