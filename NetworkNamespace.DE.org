#+TITLE: Virtuelles Netzwerk mit Open vSwitch
#+AUTHOR: Sebastian Meisel
#+DATE: <2024-02-24 Sa>
:HTML_PROPERTIES:
#+OPTIONS: num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="mystyle.css" />
:END:

#+ATTR_HTML: :width 100% :alt Das Ostseepinguin-Banner zeigt einen Ostseepinguin am Strand.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 700
[[file:img/Ostseepinguin.png]]

  #+NAME: toggle-mode-script
  #+BEGIN_EXPORT HTML
  <input type="checkbox" id="darkmode-toggle">
  <label for="darkmode-toggle"></label></input>
  <script src="script.js"></script>
  #+END_EXPORT

  #+BEGIN_SRC javascript :exports none
  document.addEventListener('DOMContentLoaded', function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
      document.documentElement.setAttribute('data-theme', 'dark');
    }
  });

  // Dunkelmodus umschalten
  function toggleDarkMode() {
    console.log("hallo");
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
  }

  const body = document.querySelector('#darkmode-toggle').addEventListener('click', toggleDarkMode)
  #+END_SRC



  #+NAME: toggle-mode-css 
  #+BEGIN_SRC css :exports none
  :root {
    /* Farben im Hellmodus */
    --background-color: #ffffff;
    --text-color: #000000;
    --primary-color: #0000ff;
    --secondary-color: #008000;
    --highlight-color: #ff0000;
    --code-background-color: #f0f0f0;
    --border-color: #cccccc;
    --tag-background-color: #cccccc;
    --code-color: #ff00ff;
  }

  :root[data-theme="dark"] {
    --background-color: #1f1f1f;
    --text-color: #c7c7c7;
    --primary-color: #6a9fb5;
    --secondary-color: #b5b5b5;
    --highlight-color: #f0c674;
    --code-background-color: #262626;
    --border-color: #333333;
    --tag-background-color: #3f3f3f;
    --code-color: #d80ffc;
  }

  /* Standardm√§√üig Hellmodus */
  body {
    background-color: var(--background-color);
    color: var(--text-color);
  }


  .title  { color: var(--primary-color);}
  .subtitle { color: var(--secondary-color); }
  .todo   { color: red; } /* Spezifische Farben f√ºr Status beibehalten */
  .done   { color: green; }
  .priority { color: orange; }
  .tag    { background-color: var(--tag-background-color); }

  .timestamp, .timestamp-kwd { color: var(--highlight-color); }

  .menu {
      position: absolute;
      display: block
      width: 300px;
      height: 200px;
      left: 75px;
      top: 100px;
      color: var(--primary-color);
  }

  pre {
    border: 1px solid var(--border-color);
    background-color: var(--code-background-color);
    color: var(--code-color);
    font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
    font-size: 16px;
  }

  code {
    color: var(--code-color);
    font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
    font-size: 16px;
  }

  label {
      width: 50px;
      height: 20px;
      position: absolute;
      top: 50px;
      left: 100px;
      display: block;
      background: #ebebeb;
      border-radius: 20px;
      box-shadow: inset 0px 1px 2px rgba(0,0,0,0.4), inset 0px -1px 2px rgba(255,255,255,0.4);
      cursor: pointer;
      transition: 0.3s;
  }

  label:after {
      content: "";
      width: 18px;
      height: 18px;
      position: absolute;
      top: 1px;
      left:1px;
      background: linear-gradient(180deg, #ffcc89, #d8860b);
      border-radius: 18px;
      box-shadow: 0px 1px 2px rgba(0,0,0,0.2);
      transition: 0.3s;t
  }


  input {
      width: 0;
      height: 0;
      visibility: hidden;
      position: absolute;
      top: 50px;
      left: 100px;
  }

  input:checked + label {
      background: #242424;
  }
  input:checked +label::after {
      left: 49px;
      transform: translateX(-100%);
      background: linear-gradient(180deg, #777, #3a3a3a);
  }
  #+END_SRC


  #+begin_menu
  [[file:NetworkNamespace.html][üá∫üá∏ EN]]
  - > [[file:index.DE.html][Home]]
  - > [[file:NetworkNamespaceDNS.DE.html][Teil II]]

--------
#+ATTR_HTML: :width 16px :alt Mastodon
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 20
[[file:img/Mastodon.png]] https://linuxrocks.online/@SebasTEAan

üìß [[mailto:sebastian.meisel+ostseepinguin@gmail.com][sebastian.meisel at gmail.com]]
  #+end_menu


* Virtuelles Netzwerk mit Open vSwitch
  :PROPERTIES:
  :header-args:bash: :shebang #!/bin/bash :tangle files/ovs.sh :eval never :session OVS :exports code
  :header-args:mermaid: :tangle nil :results file :exports results
  :header-args:javascript: :tangle script.js :exports none
  :header-args:css: :tangle mystyle.css :exports none
  :END:

In diesem Projekt m√∂chte ich zeigen, wie ein virtuelles Netzwerk unter Verwendung von Openvswitch und Netzwerknamenr√§umen unter Linux entworfen und implementiert werden kann. Durch die Nutzung virtueller Ethernet-Tunnel und eines zentralen virtuellen Switches erstellen wir eine flexible und skalierbare Netzwerkumgebung. Mein Hauptziel ist dabei - neben einem besseren Verst√§ndnis der Linux-Namenspaces - eine isolierte Netzwerkumgebung zu haben. Als Lehrer m√∂chte ich manchmal meinen Sch√ºlern zeigen, wie ein einzelnes Netzwerkprotokoll funktioniert oder was passiert, wenn ich eine Domain pinge. Doch selbst in einer virtuellen Maschine laufen oft viele andere Netzwerkverbindungen im Hintergrund, sodass es schwierig ist, herauszufiltern, woran ich interessiert bin. In der Konfiguration, die ich hier erstelle, ist das einzige Rauschen im virtuellen Netzwerk das IPv6-Router-Solicitation.

** Der Plan
Das folgende Diagramm veranschaulicht die virtuelle Netzwerkkonfiguration, die ich erreichen m√∂chte: Der virtuelle Switch dient als zentraler Punkt und verbindet drei verschiedene Netzwerknamenr√§ume, die durch rot, gr√ºn und blau dargestellt sind. Jeder Namespace erh√§lt eine IP-Adresse (=eth0-r=, =eth0-g=, =eth0-b=) innerhalb des Subnetzes =10.0.0.0/24= und ist √ºber virtuelle Ethernet-Schnittstellen (=veth-r=, =veth-g=, =veth-b=) mit dem vSwitch verbunden.

#+BEGIN_SRC mermaid :file img/ovs-net.png
graph LR;
   subgraph "default"
     direction RL
     veth-r & veth-g & veth-b o--o SW[(SW1)]
   end

   subgraph redNS
     red[eth0-r: 10.0.0.2] o---o veth-r
   end


   subgraph greenNS
     green[eth0-g: 10.0.0.3] o---o veth-g
   end

   subgraph blueNS
     blue[eth0-b: 10.0.0.4] o---o veth-b
   end


  classDef green fill:#9f6,stroke:#333,stroke-width:2px;
  class greenNS,veth-g green
  classDef red fill:#f69,stroke:#333,stroke-width:2px;
  class redNS,veth-r red
  classDef blue fill:#69f,stroke:#333,stroke-width:2px;
  class blueNS,veth-b blue
#+END_SRC

#+CAPTION: Netzwerkschema 
#+NAME: fig:netdiag
#+ATTR_HTML: :width 50% :alt Netzwerkschema, das die Beziehung zwischen den Namespacesn gem√§√ü dem obigen Absatz zeigt.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 700
#+RESULTS:
[[file:img/ovs-net.png]]
 
** Funktionen f√ºr jeden Namespace erstellen

Zun√§chst definieren wir zwei Variablen, um die beabsichtigten Namespaces und ihre zugeh√∂rigen Farben einzurichten. Die erste Variable ist eine einfache Indexliste mit den Namen ~red~, ~green~ und ~blue~. Die zweite Variable wird mit dem Bash-Befehl =declare= mit der Option =-x= f√ºr Export und =-A= f√ºr assoziative Liste erstellt. Hier verkn√ºpfen wir Escape-Codes f√ºr die Farbausgabe im Terminal mit den farbigen Namespace-Namen. Diese Definition legen wir in der Datei =files/ovs_setup.sh= ab.

*** Umgebungsvariablen und Farbliste definieren

Der folgende Bash-Skript definiert Umgebungsvariablen und eine Farbliste, die f√ºr das Einrichten des virtuellen Netzwerks erforderlich sind.

#+BEGIN_SRC bash :tangle files/ovs_setup.sh
export namespaces=(red green blue)
declare -xA colorlist=(red '\e[31m'
		      green '\e[32m'
		      orange '\e[33m'
		      blue '\e[34m'
		      magenta '\e[35m'
		      cyan '\e[36m')
#+END_SRC

Wir verwenden die =source=-Funktion, um diese Datei im zweiten Skript =files/ovs.sh= einzubinden, zu dem wir all den folgenden Code hinzuf√ºgen. So k√∂nnen wir dieses Setup leicht reproduzieren und sogar in Zukunft anpassen. Innerhalb dieses Skripts erstellen wir zun√§chst eine Funktion namens =netns()=. Sie nimmt einen Namespace-Namen und die auszuf√ºhrenden Befehle im Namespace als Eingabe entgegen und f√ºhrt den Befehl im zugewiesenen Namespace aus, wobei die Ausgabe in der Farbe des Namespaces kodiert wird. Auf diese Weise k√∂nnen wir sp√§ter leicht erkennen, in welchem Namespace ein Befehl ausgef√ºhrt wurde.

#+BEGIN_SRC bash
script_dir="$(dirname ${BASH_SOURCE[0]})"
. ${script_dir}/ovs_setup.sh
function netns () {
    color=$1
    shift
    args=$@
    if [[ ${args[0]} = "bash" ]]
    then
	echo "Zu riskant f√ºr meinen Geschmack"
    else
	if [[ $(ip netns list | grep -o ${color}) == ${color} ]]
	then
	    echo -ne ${colorlist[$color]}
	    sudo ip netns exec ${color} ${args[@]}
	    echo -ne '\e[0m'
	else
	    echo "Namespace ${color} existiert nicht"
	fi
    fi
    }
#+END_SRC

F√ºr noch mehr Bequemlichkeit erstellen wir Aliasse f√ºr jeden Namespace, sodass ein einfaches =red=, =green= oder =blue= gefolgt von dem Befehl die =netns=-Funktion f√ºr jeden dieser Namespaces aufruft.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    alias ${ns}="netns ${ns}" && alias ${ns} && export ${ns} 
done
#+END_SRC




** Namespaces erstellen

Der n√§chste Schritt besteht darin, die drei Netzwerk-Namespaces mit den Namen red, green und blue mithilfe des Befehls =ip¬†netns¬†add= zu initialisieren. Ich verwende eine for-Schleife, um √ºber die Namespace-Namen zu iterieren. So ist es einfacher, sp√§ter falls erforderlich neue Namespaces hinzuzuf√ºgen. Wo n√∂tig, verweise ich mit der Variablen ${ns} darauf.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    if [[ ! $(ip netns list | grep -o ${ns}) == ${ns} ]]
    then
	sudo ip netns add ${ns}
	echo "${ns} Namespace hinzugef√ºgt."	
    fi
done
ip netns list
sleep 1
#+END_SRC

Anschlie√üend wird das Loopback-Ger√§t in jedem Namespace mithilfe des Befehls =ip¬†l¬†dev¬†lo¬†up= aktiviert, um eine lokale Kommunikation innerhalb des Namespaces zu erm√∂glichen.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
  netns ${ns} ip link set lo up
    echo "Loopback in ${ns} is up."
done
#+END_SRC

Schlie√ülich k√∂nnen wir den aktuellen Zustand der Netzwerkschnittstellen in jedem Namespace mithilfe des Befehls =ip¬†l= √ºberpr√ºfen.

#+BEGIN_SRC bash :tangle no
for ns in ${namespaces[@]}
do
  netns ${ns} ip link
done
#+END_SRC


** Tunnel erstellen

Jetzt erstellen wir virtuelle Ethernet-Tunnel (veth) mit den Namen =veth-r=, =veth-g= und =veth-b=, die jeweils mit einer Schnittstelle in ihrem entsprechenden Netzwerk-Namespace (=eth0-r=, =eth0-g=, =eth0-b=) f√ºr die Kommunikation verbunden sind. Diese Tunnel erleichtern die Kommunikation zwischen dem vSwitch und den Netzwerk-Namespaces. Beachte, dass ich in den Ger√§tenamen nur den ersten Buchstaben verwende, um die Namespaces zu unterscheiden. Hierf√ºr verwende ich den Mechanismus der Variablenersetzung von Bash mit ${ns::1}, um nur den ersten Buchstaben jeder Zeichenkette zu erhalten. Beachte, dass dies eine Bash-Funktion ist, wenn Du eine andere Shell verwendest.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    sudo ip link add veth-${ns::1} type veth peer eth0-${ns::1}
    echo "Verkn√ºpfe veth-${ns} mit eth0-${ns}."
done
#+END_SRC

** Link in Namespaces platzieren

Nachdem die Tunnel erstellt wurden, ist der n√§chste Schritt, die Schnittstellen ihren jeweiligen Namespaces zuzuweisen. Dies wird erreicht, indem jedem Endpunkt eines Tunnels (=eth0-r=, =eth0-g=, =eth0-b=) sein entsprechender Namespace (rot, gr√ºn, blau) zugeordnet wird.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    sudo ip link set eth0-${ns::1} netns ${ns}
done
#+END_SRC

** IPv4-Adressen hinzuf√ºgen

Schlie√ülich werden IPv4-Adressen den Schnittstellen in jedem Namespace zugewiesen, um die Netzwerkkommunikation zu erm√∂glichen. Die IP-Adressen =10.0.0.2=, =10.0.0.3= und =10.0.0.4= mit einer Subnetzmaske =/24= werden jeweils den Schnittstellen =eth0-r=, =eth0-g= und =eth0-b=  zugewiesen. Zus√§tzlich werden die Schnittstellen aktiviert, um die Netzwerkkonfiguration zu aktivieren.

#+BEGIN_SRC bash
ip=1
for ns in ${namespaces[@]}
do
    ip=$((ip+1))
  netns ${ns} ip address add 10.0.0.${ip}/24 dev eth0-${ns::1}
  netns ${ns} ip link set dev eth0-${ns:0:1} up
    echo "Add IP 10.0.0.${ip} to eth0-${ns::1}."
done
#+END_SRC

* Virtuellen Switch √∂ffnen

Um den virtuellen Switch einzurichten, wird zun√§chst das Openvswitch-Paket mithilfe des entsprechenden Paketmanagers installiert. Anschlie√üend wird der Dienst =ovs-vswitchd= gestartet, um den Switch zu verwalten.


** Installieren

#+BEGIN_SRC bash :eval never :tangle no
if [ -f /etc/os-release ]; then
    . /etc/os-release
else
    echo "Die Linux-Distribution kann nicht bestimmt werden."
    exit 1
fi
case $ID_LIKE in
    debian|ubuntu)
        sudo apt install -y openvswitch-switch
        ;;
    fedora|rhel|centos)
        sudo yum install -y openvswitch
        ;;
    suse)
        sudo zypper install -y openvswitch
        ;;
    arch)
        sudo pacman -Syu openvswitch
        ;;
    ,*)
        echo "Nicht unterst√ºtzte Distribution."
	exit 1
        ;;
esac
if  [[ $ID == arch ]]; then
    sudo pacman -Syu openvswitch
else
    echo "Nicht unterst√ºtzte Distribution."
    exit 1
fi
#+END_SRC

#+BEGIN_SRC bash
sudo systemctl start ovs-vswitchd.service
echo "ovs-vswitchd gestartet"
#+END_SRC

** Switch hinzuf√ºgen

Nach der Installation erstelle ich einen virtuellen Switch mit dem Namen SW1 mithilfe des Befehls =ovs-vsctl add-br=.

#+BEGIN_SRC bash
sudo ovs-vsctl add-br SW1
#+END_SRC

Die Switch-Konfiguration wird mithilfe von =ovs-vsctl show= angezeigt.
#+BEGIN_SRC bash :tangle no
sudo ovs-vsctl show
#+END_SRC


*** Ports hinzuf√ºgen

Als N√§chstes f√ºgen wir Ports zum virtuellen Switch hinzu, um ihn mit den Netzwerk-Namespaces zu verbinden. Jeder Port ist mit einer entsprechenden Tunnel-Schnittstelle (=veth-r=, =veth-g=, =veth-b=) verbunden.

#+BEGIN_SRC bash
for ns in {r,g,b}
do
    sudo ovs-vsctl add-port SW1 veth-${ns}
    echo "veth-${ns} zu SW1 hinzugef√ºgt."
done
#+END_SRC

Erneut k√∂nnen wir best√§tigen, dass alles wie beabsichtigt funktioniert hat:

#+BEGIN_SRC bash  :tangle no
sudo ovs-vsctl show
#+END_SRC

Diese Ports m√ºssen nun aktiviert werden.

#+BEGIN_SRC bash
for ns in {r,g,b}
do
    sudo ip link set veth-${ns} up
    echo "Link veth-{ns} ist aktiviert."
done
#+END_SRC

Ich √ºberpr√ºfe immer gerne noch einmal. Daher 'grepe' ich nach der =veth=-Schnittstelle und verwende die =-A=-Option, um immer die ersten 3 Zeilen jeder Schnittstellenkonfiguration anzuzeigen.

#+BEGIN_SRC bash :tangle no
sudo ip a | grep veth -A3
#+END_SRC

** Aufr√§umen

Ein Neustart wird in der Regel den Gro√üteil des Chaos hinter uns aufr√§umen, aber ich m√∂chte ein gutes Kind sein und selbst aufr√§umen. Daher habe ich ein weiteres Skript erstellt, das genau das tut.

#+BEGIN_SRC bash :tangle files/ovs_cleanup.sh 
script_dir="$(dirname ${BASH_SOURCE[0]})"
#Source Setup
. ${script_dir}/ovs_setup.sh

# Create a list of target interfaces
for ns in ${namespaces[@]}
do
    target_interfaces=(${target_interfaces[@]} veth-${ns::1})
done

# √úberpr√ºfen Sie auf vorhandene Namespaces
if [[ -n $(ip netns list) ]]; then
  echo "Netzwerk-Namespaces werden entfernt..."

  # Durchlaufen Sie jeden Namespace und entfernen Sie nur passende
  for ns in $(ip netns list | awk '{print $1}'); do
    if [[ "${namespaces[@]}" =~ "$ns" ]]; then
      sudo ip netns del $ns
      echo "Namespace entfernt: $ns"
    fi
  done
else
  echo "Keine Netzwerk-Namespaces gefunden."
fi

# √úberpr√ºfen Sie auf vorhandene veth-Schnittstellen
if [[ $(ip link show | grep veth -c) -gt 0 ]]; then
  echo "Veth-Schnittstellen werden entfernt..."

  # Durchlaufen Sie jede veth-Schnittstelle und entfernen Sie nur passende
  for veth in $(ip link show | grep veth | awk '{print $2}' |sed 's/@.*$//g'); do
    if [[ "${target_interfaces[@]}" =~ "$veth" ]]; then
      sudo ip link del $veth
      echo "Schnittstelle entfernt: $veth"
    fi
  done
else
  echo "Keine veth-Schnittstellen gefunden."
fi

echo "Open vSwitch wird gestoppt und deaktiviert..."
sudo systemctl stop ovs-vswitchd.service

# √úberpr√ºfen, ob das benannte Ausf√ºhrungsverzeichnis f√ºr den blauen Namespace vorhanden ist
if [[ -d $(ls -d blue_named_run_?????) ]]; then 
    rm -rf blue_named_run_?????
    echo "Ausf√ºhrungsverzeichnis f√ºr den benannten Dienst im blauen Namespace entfernt".
fi

for ns in ${namespaces[@]}
do
    if [[ $(alias ${ns}) ]] ; then
	unalias ${ns}
	"${ns} entaliasiert."
    fi
done

echo "Unseting netns function and variables"
unset -f netns
unset namespaces
unset colorlist

echo "Aufr√§umen abgeschlossen!"
#+END_SRC


* Fazit

Es ist √ºberraschend einfach, dieses grundlegende Setup zu erstellen.

Wir k√∂nnen jetzt die verschiedenen Namespaces erkunden, indem wir netzwerkbezogene Befehle mit den =red()=, =blue()= und =green()= Funktionen aufrufen, z. B.:

#+BEGIN_SRC bash :tangle nil
sudo blue ip route
sudo red ping 10.0.0.3 -c 5
sudo green nstat -s | grep -i icmp
#+END_SRC

Dies ist ein gro√üartiger Spielplatz, um grundlegende Netzwerkfunktionalit√§ten zu erkunden.


* Anerkennung


Ich habe √ºber Netzwerk-Namespaces in zwei fantastischen Videos gelernt:
- [[https://www.youtube.com/watch?v=_WgUwUf1d34&t=940s][Introduction to Linux Network Namespaces by David Mahler (YouTube)]]
- [[https://www.youtube.com/watch?v=iN2RnYaFn-0][Linux Network Namespaces with ip netns by Andrew Mallet (YouTube)]]
