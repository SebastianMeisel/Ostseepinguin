#+TITLE: Virtual network with Openswitch
#+AUTHOR: Sebastian Meisel
#+DATE: <2024-02-24 Sa>
#+
:HTML_PROPERTIES:
#+OPTIONS: num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="mystyle.css" />
:END:


* Virtual network with Openswitch
:PROPERTIES:
:header-args:bash: :shebang #!/bin/bash :tangle files/ovs.sh :eval never :session OVS :exports code
:header-args:mermaid: :tangle nil :results file :exports results
:header-args:javascript: :tangle script.js :exports none
:header-args:css: :tangle mystyle.css :exports none
:END:

#+NAME: toggle-mode-script
#+BEGIN_EXPORT HTML
<input type="checkbox" id="darkmode-toggle">
<label for="darkmode-toggle"></label></input>
<script src="script.js"></script>
#+END_EXPORT

#+BEGIN_SRC javascript

document.addEventListener('DOMContentLoaded', function() {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.documentElement.setAttribute('data-theme', 'dark');
  }
});

// Toggle dark mode
function toggleDarkMode() {
  console.log("hallo");
  const currentTheme = document.documentElement.getAttribute('data-theme');
  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
  document.documentElement.setAttribute('data-theme', newTheme);
  localStorage.setItem('theme', newTheme);
}

const body = document.querySelector('#darkmode-toggle').addEventListener('click', toggleDarkMode)
#+END_SRC



#+NAME: toggle-mode-css
#+BEGIN_SRC css
:root {
  /* Light mode colors */
  --background-color: #ffffff;
  --text-color: #000000;
  --primary-color: #0000ff;
  --secondary-color: #008000;
  --highlight-color: #ff0000;
  --code-background-color: #f0f0f0;
  --border-color: #cccccc;
  --tag-background-color: #cccccc;
  --code-color: #ff00ff;
}

:root[data-theme="dark"] {
  --background-color: #1f1f1f;
  --text-color: #c7c7c7;
  --primary-color: #6a9fb5;
  --secondary-color: #b5b5b5;
  --highlight-color: #f0c674;
  --code-background-color: #262626;
  --border-color: #333333;
  --tag-background-color: #3f3f3f;
  --code-color: #d80ffc;
}

/* Default to light mode */
body {
  background-color: var(--background-color);
  color: var(--text-color);
}


.title  { color: var(--primary-color);}
.subtitle { color: var(--secondary-color); }
.todo   { color: red; } /* Keeping specific colors for statuses */
.done   { color: green; }
.priority { color: orange; }
.tag    { background-color: var(--tag-background-color); }

.timestamp, .timestamp-kwd { color: var(--highlight-color); }

pre {
  border: 1px solid var(--border-color);
  background-color: var(--code-background-color);
  color: var(--code-color);
  font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
  font-size: 16px;
}

code {
  color: var(--code-color);
  font-family: 'Source Code Pro', 'Courier New', 'Lucida Console', Monaco, monospace;
  font-size: 16px;
}

label {
    width: 50px;
    height: 20px;
    position: absolute;
    top: 50px;
    left: 100px;
    display: block;
    background: #ebebeb;
    border-radius: 20px;
    box-shadow: inset 0px 1px 2px rgba(0,0,0,0.4), inset 0px -1px 2px rgba(255,255,255,0.4);
    cursor: pointer;
    transition: 0.3s;
}

label:after {
    content: "";
    width: 18px;
    height: 18px;
    position: absolute;
    top: 1px;
    left:1px;
    background: linear-gradient(180deg, #ffcc89, #d8860b);
    border-radius: 18px;
    box-shadow: 0px 1px 2px rgba(0,0,0,0.2);
    transition: 0.3s;t
}


input {
    width: 0;
    height: 0;
    visibility: hidden;
    position: absolute;
    top: 50px;
    left: 100px;
}

input:checked + label {
    background: #242424;
}
input:checked +label::after {
    left: 49px;
    transform: translateX(-100%);
    background: linear-gradient(180deg, #777, #3a3a3a);
}
#+END_SRC



In this project, I want to show, how to designed and implemented a virtual network using Openvswitch and network namespaces under Linux. By leveraging virtual Ethernet tunnels and a central virtual switch, we create a flexible and scalable network environment. My main goal with this - besides understanding Linux namespaces better – is to have an isolated network environment. As a teacher I sometimes want to show my students how a single network protocol works, or what happens when I ping a domain. However even in a virtual machine there is often are many other network connection running in the background that it is difficult to filter to what I want I'm interested in. In that setup I create here the only noise in the virtual network is IPv6 Router Solicitation.

** The plan

The following diagram illustrates a virtual network setup I want to achieve: The virtual Switch serves as the central point, connecting three distinct network namespaces represented by red, green, and blue. Each namespace is allocated an IP address (=eth0-r=, =eth0-g=, =eth0-b=) within the =10.0.0.0/24= subnet and is connected to the vSwitch via virtual Ethernet interfaces (=veth-r=, =veth-g=, =veth-b=).

#+BEGIN_SRC mermaid :file img/ovs-net.png
graph LR;
   subgraph "default"
     direction RL
     veth-r & veth-g & veth-b o--o SW[(SW1)]
   end

   subgraph redNS
     red[eth0-r: 10.0.0.2] o---o veth-r
   end


   subgraph greenNS
     green[eth0-g: 10.0.0.3] o---o veth-g
   end

   subgraph blueNS
     blue[eth0-b: 10.0.0.4] o---o veth-b
   end


  classDef green fill:#9f6,stroke:#333,stroke-width:2px;
  class greenNS,veth-g green
  classDef red fill:#f69,stroke:#333,stroke-width:2px;
  class redNS,veth-r red
  classDef blue fill:#69f,stroke:#333,stroke-width:2px;
  class blueNS,veth-b blue
     #+END_SRC

#+CAPTION: Network Diagram 
#+NAME: fig:netdiag
#+ATTR_HTML: :width 50% :alt Network Diagram showing the relationship between the namespaces as described in the paragraph above.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 700
#+RESULTS:
[[file:img/ovs-net.png]]

** Create functions for each name space

To begin with we define functions for each network namespace: green, red, orange (as a spare for future projects), and blue. These functions allow executing commands within the respective namespaces using the =ip netns exec= command. Each function changes the color output of the executed commands for better visual identification. It also checks if the namespace does actually exist, before trying to run a command in it. This is important because each of these command must be run with =sudo=.

I put these functions as well as all the other code needed to create the virtual network in a file called =ovs.sh= in the =./files/= subdirectory. To recreate the virtual network later, I have to =source= this file, if I want to be able to use these functions. 

#+BEGIN_SRC bash
function red () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	if [[ $(ip netns list | grep -o "red") == red ]]
	then
	    echo -ne '\e[32m'
	    sudo ip netns exec red $@
	    echo -ne '\e[0m'
	else
	    echo "namespace red does not exist"
	fi
    fi
    }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash
function green () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	if [[ $(ip netns list | grep -o "green") == green ]]
	then
	    echo -ne '\e[32m'
	    sudo ip netns exec green $@
	    echo -ne '\e[0m'
	else
	    echo "namespace green does not exist"
	fi
    fi
    }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash
function orange () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	if [[ $(ip netns list | grep -o "orange") == orange ]]
	then
	    echo -ne '\e[32m'
	    sudo ip netns exec orange $@
	    echo -ne '\e[0m'
	else
	    echo "namespace orange does not exist"
	fi
    fi
    }
#+END_SRC

#+RESULTS:


#+BEGIN_SRC bash
function blue () {
    if [[ $1 = "bash" ]]
    then
	echo "To risky for my taste"
    else
	if [[ $(ip netns list | grep -o "blue") == blue ]]
	then
	    echo -ne '\e[32m'
	    sudo ip netns exec blue $@
	    echo -ne '\e[0m'
	else
	    echo "namespace blue does not exist"
	fi
    fi
    }
#+END_SRC



** Create namespaces

The next step is initializing the three network namespaces named red, green, and blue using the =ip netns add= command. I use a for loop to iterate over the namespace names. So it's easy to add new namespaces later on, if needed. Where needed I refer to them with the ${ns} variable.

#+BEGIN_SRC bash
namespaces=(red green blue)
for ns in ${namespaces[@]}
do
    if [[ ! -n $(ip netns list | grep -q ${ns}) ]]
    then
	sudo ip netns add ${ns}
	echo "${ns} namespace added."	
    fi
done
ip netns list
sleep 1
#+END_SRC

Subsequently, the loopback interface within each namespace is brought up using the =ip l dev lo up= command to enable local communication within the namespace.

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
  ${ns} ip link lo up
  echo "Loopback in ${ns} is up."
done
#+END_SRC

Finally, we can check the current state of network interfaces within each namespace  using the =ip l= command.

#+BEGIN_SRC bash :tangle no
for ns in ${namespaces[@]}
do
    ${ns} ip link
done
#+END_SRC

** Create tunnels

Now we create virtual Ethernet tunnels (veth) named =veth-r=, =veth-g=, and =veth-b=, each paired with an interface in its respective network namespace (=eth0-r=, =eth0-g=, =eth0-b=) for communication. These tunnels facilitate communication between the vSwitch and the network namespaces. Note that in the device names, I only use the first letter to distinguish the namespaces. For this I use bash's variable substitution mechanism with ${ns::1}, I get just the first letter of each string. Be aware, that this is a bash feature, when your using another shell. 

#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    sudo ip link add veth-${ns::1} type veth peer eth0-${ns::1}
    echo "Linked veth-${ns} to eth0-${ns}."
done
#+END_SRC

** Place link in namespaces

After creating the tunnels, the next step is to assign the interfaces to their respective namespaces. This is achieved by associating each tunnel's endpoint (=eth0-r=, =eth0-g=, =eth0-b=) with its corresponding namespace (red, green, blue).


#+BEGIN_SRC bash
for ns in ${namespaces[@]}
do
    sudo ip link set eth0-${ns::1} netns ${ns}
done
    #+END_SRC

** Add IPv4-Addresses

Finally, IPv4 addresses are assigned to the interfaces within each namespace to enable network communication. The IP addresses =10.0.0.2=, =10.0.0.3=, and =10.0.0.4= with a =/24= subnet mask are allocated to =eth0-r=, =eth0-g=, and =eth0-b= interfaces, respectively. Additionally, the interfaces are brought up to activate the network configuration.


#+BEGIN_SRC bash
ip=1
for ns in ${namespaces[@]}
do
    ip=$((ip+1))
    ${ns} ip address add 10.0.0.${ip}/24 dev eth0-${ns::1}
    ${ns} ip link set dev eth0-${ns:0:1} up
    echo "Add IP 10.0.0.${ip} to eth0-${ns::1}."
done
#+END_SRC

** Open virtual switch

To set up the virtual switch, first, the Openvswitch package is installed using the appropriate package manager, followed by starting the =ovs-vswitchd= service to manage the switch.


*** Install
#+BEGIN_SRC bash :eval never :tangle no
if [ -f /etc/os-release ]; then
    . /etc/os-release
else
    echo "Cannot determine the Linux distribution."
    exit 1
fi
case $ID_LIKE in
    debian|ubuntu)
        sudo apt install -y openvswitch-switch
        ;;
    fedora|rhel|centos)
        sudo yum install -y openvswitch
        ;;
    suse)
        sudo zypper install -y openvswitch
        ;;
    arch)
        sudo pacman -Syu openvswitch
        ;;
    *)
        echo "Unsupported distribution."
        exit 1
        ;;
esac
#+END_SRC

#+BEGIN_SRC bash
sudo systemctl start ovs-vswitchd.service
echo "Started ovs-vswitchd"
#+END_SRC

*** Add Switch

After installation, I create  a virtual switch named SW1 using the =ovs-vsctl add-br= command. 

#+BEGIN_SRC bash
sudo ovs-vsctl add-br SW1
#+END_SRC

The switch configuration is displayed using =ovs-vsctl show=.
#+BEGIN_SRC bash :tangle no
sudo ovs-vsctl show
#+END_SRC


*** Add ports
Next, we add ports to the virtual switch to connect it with the network namespaces. Each port is associated with a corresponding tunnel interface (=veth-r=, =veth-g=, =veth-b=).

#+BEGIN_SRC bash
for ns in {r,g,b}
do
    sudo ovs-vsctl add-port SW1 veth-${ns}
    echo "Added veth-${ns} to SW1."
done
#+END_SRC

Again we can confirm everything has work as intended with:

#+BEGIN_SRC bash  :tangle no
sudo ovs-vsctl show
#+END_SRC

These ports must now be activated.

#+BEGIN_SRC bash
for ns in {r,g,b}
do
    sudo ip link set veth-${ns} up
    echo "Link veth-{ns} is up."
done
#+END_SRC

I always like to double check. So I grep for the =veth= interface and use the =-A= option to always show the first 3 lines of each interface configuration.

#+BEGIN_SRC bash :tangle no
sudo ip a | grep veth -A3
#+END_SRC

** Cleanup

A reboot will always clean most of the mess behind us, but I want to be a good child and clean up for my self, so I created another script to do exactly this.

#+BEGIN_SRC bash :tangle files/ovs_cleanup.sh 
# List of namespaces created by your previous script
target_namespaces=(red green blue)

# List of veth interfaces created by your previous script
target_interfaces=(veth-r veth-g veth-b)

# Check for existing namespaces
if [[ -n $(ip netns list) ]]; then
  echo "Removing network namespaces..."

  # Loop through each namespace and remove only matching ones
  for ns in $(ip netns list | awk '{print $1}'); do
    if [[ "${target_namespaces[@]}" =~ "$ns" ]]; then
      sudo ip netns del $ns
      echo "Removed namespace: $ns"
    fi
  done
else
  echo "No network namespaces found."
fi

# Check for existing veth interfaces
if [[ $(ip link show | grep veth -c) -gt 0 ]]; then
  echo "Removing veth interfaces..."

  # Loop through each veth interface and remove only matching ones
  for veth in $(ip link show | grep veth | awk '{print $2}' |sed 's/@.*$//g'); do
    if [[ "${target_interfaces[@]}" =~ "$veth" ]]; then
      sudo ip link del $veth
      echo "Removed interface: $veth"
    fi
  done
else
  echo "No veth interfaces found."
fi

echo "Stopping and disabling Open vSwitch..."
sudo systemctl stop ovs-vswitchd.service

# check if named run directory for blue namespace exitsts
if [[ -d $(ls -d blue_named_run_?????) ]]; then 
    rm -rf blue_named_run_?????
    echo "Removed run directory for named service in blue".
fi

echo "Cleanup complete!"
#+END_SRC


* Conclusion

It is surprisingly easy to create this basic setup. 

We can now go and explore the different name spaces, by calling network related command with the =red()=, =blue()= and =green()= functions like:

#+BEGIN_SRC bash :tangle nil
sudo blue ip route
sudo red ping 10.0.0.3 -c 5
sudo green nstat -s | grep -i icmp
#+END_SRC

This is a great playground to explore basic network functionality. 







# Local Variables:
# jinx-languages: "en_US"
# End:
