* USE-Methode
:PROPERTIES:
:header-args: :session *R* :cache yes :results value verbatim :exports both :tangle yes
:END:

Um Leistungsprobleme auf einem System zu beheben, ist es wichtig, einen systematischen Ansatz zu verwenden. Die USE-Methode von Greeg Brendan ist eine solche und ein solcher Ansatz.

Weitere Informationen finden Sie unter https://brendangregg.com/usemethod.html (nur http).

Dafür wollen wir auswerten

1 Auslastung 
2 Sättigung 
3 Fehler

für alle Systemelemente.

In dieser Datei gehe ich die wichtigsten Systemressourcen durch und zeige die Überprüfung der Tools zu diesen drei Themen. Ich folge locker der Checkliste von Gregg Brendan: https://brendangregg.com/USEmethod/use-linux.html .

Bevor ich anfange, muss ich meine Einheimischen für die Befehle in dieser Datei auf Englisch (anstelle von Deutsch, das ich normalerweise verwende) einstellen.

#+BEGIN_SRC bash 
export LC_ALL = en_US.utf8
S_COLORS = niemals
#+END_SRC

* CPU
** Auslastung
*** vmstat
~vmstat~, ohne weitere Option, zeigt Informationen zur CPU-Auslastung an. Wir interessieren uns für die 13., 14. und 17. Spalte:

US: Benutzerzeit - CPU-Zeit, die von Benutzerprozessen verbraucht wird.
SY: Systemzeit - CPU-Zeit, die von Systemprozessen verbraucht wird.
st: gestohlene Zeit - Zeit, die der Prozess der virtuellen Maschine auf der physischen CPU auf ihre CPU-Zeit wartet.

#+BEGIN_SRC bash 
vmstat 1 3 | awk ' {print $ 13 "" $ 14 "" $ 17} '  | column -tc3
#+END_SRC

Im Snippet habe ich awk verwendet, um nur die Spalten zu drucken, die ich benötige, getrennt durch ein Leerzeichen. Der Befehl column wird für ein besseres Layout verwendet: -t: Spalten füllen. -c3: drei Spalten.

*** sar
Für die permanente Überwachung kann ~sasd~ aus dem ~sysstat~-Paket  verwendet werden. ~sar~ wird verwendet, um die gesammelten Daten zu lesen. Mit der Option ~-u~ (oder ohne, wie es die Standardeinstellung ist) erhalten Sie Informationen über die CPU. Wir interessieren uns für alle Spalten aber ~%idle~ und ~%iowait~. Sie können einen Zeitraum mit ~-s~ (Start) und ~-e~ (Ende) auswählen.

#+BEGIN_SRC bash 
sar -u -s 10:00 -e 11:00 | awk ' NR> 1 {print $ 1 "" $ 2 "" $ 3 "" $ 4 "" $ 6} ' 
#+END_SRC


Benutzen Sie ~-P ALL~ für mehrere CPUs. Sie können ~ALL~ durch eine Liste von CPUs ersetzen :

#+BEGIN_SRC bash 
sar -P 1,3 -s 10:00 -e 10:20 | awk ' NR> 1 {print $ 1 "" $ 2 "" $ 3 "" $ 4 "" $ 6} ' 
#+END_SRC

Im Snippet habe ich nur das Datum (4. Spalte) aus der ersten Zeile der Ausgabe gedruckt : NR == 1 {print $4}. Für die folgenden Zeilen habe ich alle bis auf die 5. und 7. Spalte gedruckt : NR > 1 { print ...}.

ps (top | htop)
Sie können auch die CPU-Auslastung verwenden topoder htopanzeigen. Mit können pswir nur diese Spalte anzeigen - oder andere von Interesse mit der -oOption hinzufügen :

ps -o pid, pcpu | sed -n ' 2, $ p '  | sort -rhk2 | Kopf -5
Um des Schnipsels willen habe ich mich auf die ersten 5 Zeilen konzentriert. Der sedBefehl entfernt den Header zum Sortieren. Dies kann auch durch Hinzufügen der --no-header~option to the ~ps~command. I sort the output with ~sortumgekehrten Reihenfolge: -r: (höchste Werte zuerst) erfolgen. -h: Menschennummer 1010> 101> 10. -k2: Die zweite Spalte ist der Schlüssel zum Sortieren.

Sättigung
vmstat, sar, dstat
Zur systemweiten Überwachung der CPU-Sättigung kann jedes dieser Tools verwendet werden. sarkönnte wieder ausgewertete Daten auswerten sasd. Aber wie die anderen Tools können Sie es auch für die Live-Überwachung verwenden. Jeder Befehl sammelte jede 3Sekunde Datenzeiten 3. Wir sind an der Anzahl der Prozesse in der Ausführungswarteschlange interessiert. Dieser Wert sollte nicht größer sein als die Anzahl der verfügbaren CPU-Kerne. Sie können diese Nummer von erhalten lscpu~s output or from ~/proc/cpuinfo.

lscpu | grep -m1 ' CPU (s) '
 Echo 
Echo  " vmstat " 
vmstat 3 3 | awk ' NR> 1 {print $ 1} '
 echo 
echo  " sar " 
sar -q 3 3 | awk ' NR> 2 {print $ 2} '
 echo 
echo  " dstat " 
dstat -p 3 3 | awk ' NR> 1 {print $ 1} '
/ proc / [PID] / schedstat
Die Daten in der Datei schedstatin /proc/[PID]können verwendet werden, um die CPU-Sättigung durch einzelne Prozesse zu überprüfen. Es enthält drei Zahlen: 1 CPU-Zeit 2 Zeit in der Ausführungswarteschlange. 3 Anzahl von Zeitscheiben laufen auf der CPU.

Wir interessieren uns für die Laufzeit der Warteschlange:

für  d  in  $ ( find / proc / -maxdepth 1 -typ d -regex ' . * [0-9] $ ' )  ; \
   do  echo -n " $ d : "  ; \.
  cut -f2 -d '  '  $ d / schedstat 2> / dev / null ; \
 done  | sort -rhk2 | Kopf -5
Die forSchleife im Snippet durchläuft alle Prozessverzeichnisse.

Zur besseren Beziehung können Sie den Wert auch durch die CPU-Zeit teilen:

für  d  in  $ ( find / proc / -maxdepth 1 -typ d -regex ' . * [0-9] $ ' )  ; \
     do  echo -n " $ d : "  ; \
     echo  $ ( awk ' {print $ 2 "/" $ 1} '  $ d / schedstat 2> / dev / null | bc 2> / dev / null )  ; \
 done   | egrep -v ' 0 $ '  | sort -rhk2 | Kopf -5
Sehen Sie, wie unterschiedlich die Top 5 sind.

Fehler
Ich kenne keine Möglichkeit, die CLI auf CPU-Fehler zu überprüfen.

Erinnerung
Verwertung
kostenlos
Das erste Dienstprogramm, das bei der Bewertung der Speichernutzung in den Sinn kommt, ist von Bedeutung free. Der -mverwendet Mebibyte als Einheit.

frei -m
Das ~~ ersetzt nur die deutschen Gebietsschemas auf meinem System.

vmstat
Wieder können wir vmstatfür kumulative Werte verwenden. Die Option verwendet -SMwieder Mebibyte.

vmstat -SM | awk ' NR> 1 {print $ 3 "" $ 4} '
sar
Dies ist auch ein Standard in der Toolbox: sar -r( -rfür Speicherstatistiken). Die -h~option stands for 'human readable'. We are interested in the column ~%memused.

sar -rh -s 15:00 -e 15:30 | \.
awk ' NR == 1 {print $ 4} \ 
     NR> 2 {print $ 1 "" $ 5} '
# + ERGEBNISSE [d2c680fc368af5f7a0f2c5f126b7219665a151e0]:

 sar -rh -s 15:00 -e 15:30 | \
awk 'NR == 1 {print $ 4} \
NR> 2 {print $ 1 "" $ 5} '
echo 'org_babel_sh_eoe'
03/06/21
memused
dstat
Sie können auch installieren dstat, dass Sie Speicherinformationen mit der Option "-m" erhalten.

dstat -m 1 3 | awk ' NR> = 2 {print $ 2} '
Platte
Dieses Tool erfordert eine Root-Berechtigung und bietet ein spezielles Innenleben. Es zeigt Ressourcen der sogenannten Slabs - Gruppen von Prozessen, für die der Kernel Cache unterschiedlicher Größe zuweist. Die -s cOption wird nach der Cache-Größe sortiert. Die Option ~ -o ~ bedeutet "einmal".

sudo slabtop -os c | Kopf -5
# + ERGEBNISSE [57ed92fd55d247fb034a8474168c40911d652cd8]:

OBJS AKTIVER GEBRAUCH OBJ GRÖSSENPLATTEN OBJ / SLAB CACHE GRÖSSENNAME

Objekte aktiv / gesamt (% gehört): 2128003/2377358 (89	5%)		
Platten aktiv / gesamt (% gehört): 66978/66978 (100	0%)		
Caches aktiv / gesamt: 119/160 (74	4%)		
Größe aktiv / gesamt: 442577	98K / 503093	96 K (88)	0%)
Minimales / durchschnittliches / maximales Objekt: 0	01K / 0	21K / 14	75K
193565 158200 81% 1.07K 33053 29 1057696K ext4_inode_cache 568407 394356 69% 0.19K 27067 21 108268K Zahnersatz 79408 57934 72% 0.57K 2836 28 45376K radix_tree_node

ps (top / htop)
Sie können auch topoder verwenden htop. Aber psmit der -oOption können uns auf die Informationen konzentrieren , helfen wir brauchen.

pid: PID
% mem: Speichernutzung in%
vsz: virtueller Speicher (Swap)
comm: Befehl
ps -eo pid,% mem, vsz, comm | sort -rhk2,3 | Spalte -tc4 | Kopf -5
Sättigung
vmstat
Hohe Swap-Raten sind ein Zeichen für Speichersättigung. Geben Sie uns in vmstatden Spalten si(Swap In) und so(Swap Out) diese Informationen.

vmstat -SM | awk ' NR> 1 {print $ 7 "" $ 8} '
sar
Mit der -BOption werden sarSeitenstatistiken gemeldet. Hohe Werte für das Seiten-Scannen sind Indikatoren für die Speichersättigung. Die entsprechenden Spalten gelten pgscank~for pages scanned by kswapd daemon and ~pgscandfür direkt gescannte Seiten.

sar -B | awk ' NR == 3 {print $ 1 "" $ 7 "" $ 8}; END {print $ 1 "" $ 7 "" $ 8} '  | Spalte -tc3
Mit dem -Wbietet das Ein- und Auslagern von Werten in Seiten pro Sekunde:

sar -W | sed -n ' 3p; $ p '  | Spalte -tc3
**** / proc / [PID] / stat

In dieser Datei zeigt der 10. Wert die geringfügige Fehlerrate, die laut Gregg Brendan ein Indikator für die Speichersättigung auf Prozessebene sein kann.

cat / proc / 33 / stat | awk ' {print $ 10} '
dmesg | journalctl
Ich benutze Earlyoom, um Situationen mit wenig Gedächtnis zu vermeiden. Wenn Sie dies tun, überprüfen Sie die Ausgabe von journalctlmit der -uOption, Nachrichten auszuwählen earlyoom.service.

journalctl -u Earlyoom.service - seit 10:20 - bis 10:25
# + ERGEBNISSE [bb60559972e1cd72a7a8dd3e151470eb99d0a6a8]:

bash: bind: Warnung: Zeileneditierung ist nicht eingestellt.
bash: bind: Warnung: Zeileneditierung ist nicht eingestellt.
bash: bind: Warnung: Zeileneditierung ist nicht eingestellt.
bash: bind: Warnung: Zeileneditierung ist nicht eingestellt.
bash: bind: Warnung: Zeileneditierung ist nicht eingestellt.
nicht gesetzt: Befehl nicht gefunden.
nicht gesetzt: Befehl nicht gefunden.
nicht gesetzt: Befehl nicht gefunden.
woher: Befehl nicht gefunden.
woher: Befehl nicht gefunden.
- Die Protokolle beginnen um Mi 2020-10-28 22:04:43 MEZ und enden um Sa 2021-03-06 20:41:11 MEZ. - -
), Swap-frei: 8187 von 8191 MiB (99%)
), Swap-frei: 8187 von 8191 MiB (99%)
), Swap-frei: 8187 von 8191 MiB (99%)
), Swap-frei: 8187 von 8191 MiB (99%)
), Swap-frei: 8187 von 8191 MiB (99%)
In dmesg können Sie nach Prozessen suchen, die vom OOM-Killer getötet wurden:

dmesg | grep kill  | Schwanz -5
Error
Sie können memtesterden Speicher installieren und zum Testen verwenden oder im Journal nach physischen Fehlern suchen.

Netzwerk
Verwertung
ip
Während ifconfiges lange veraltet ist, fällt heute ipbei der Überwachung der Netzwerknutzung zuerst ein. Mit der -sFlagge erhalten Sie die Statistiken, die Sie benötigen.

ip -s link show wlp1s0 | awk ' BEGIN {i = 999} 
                      / ^ [1-9] / {print $ 2}; \ 
                      / RX / {printf "% s", "RX:"; i = (NR + 1)}; \ 
                      / TX / {printf "% s", "TX:"; i = (NR + 1)}; \ 
		       NR == i {printf "% 2.2f GiB \ n", ($ 1/1024/1024/1024)} ' 
Im Snippet awkbeginnt die Codesuche nach Zeilen mit einer Zahl, die den Beginn eines neuen Abschnitts für ein Gerät angibt, dessen Name (zweite Spalte) dann gedruckt wird. Anschließend wird nach den Zeichenfolgen 'RX' und 'TX' gesucht, wobei eine Variable i auf die um eins erhöhte Zeilennummer gesetzt wird, für die die erste Wertespalte nach der Konvertierung von Bytes in Gibibytes gedruckt wird.

ifstat
Während Sie ifconfignur einen Summenwert erhalten, gibt es viele Tools, mit denen Sie die Netzlast live verfolgen können. Eine davon ist ifstat: -z Blendet die Schnittstellen aus, deren Zähler null sind. -b Verwenden Sie kbit / s anstelle der Standard-KByte / s. -T Summen anzeigen.

ifstat -zbT 1 3 | \.
    awk ' NR == 1 {print "-" $ 1 "- -------- -" $ 2 "- --------"}; NR> 1 {print $ 0} '  | \.
    sed ' s / s / s_ / g '
Die awlund sed-Anweisungen im Snippet dienen nur dazu, die Ergebnisse im Organisationsmodus zu verschönern.

sar
sar -n DEV 1 1 | awk ' NR> 2 && $ 3! = 0 {print $ 1 "" $ 2 "" $ 3 "" $ 4 "" $ 5 "" $ 6} '
dtstat
dstat -n 1 3
nicstat
nicstat -zM | awk ' {$ 9 = $ 10 = ""; print $ 0} '
gesammelt
collectl -sn -oT -i05 -c3 | awk ' NR> 2 {print $ 0} '
/ proc / net / dev
cat / proc / net / dev | \.
awk ' NR == 1 {print $ 1 $ 2 "--------" $ 4 "--------"}; \ 
     NR == 2 {$ 1 "MByte-Pakete drucken MByte-Pakete"} 
     NR> 2 {$ 1 "($ 2/1000000)" $ 3 "($ 10/1000000)" $ 11} "
Sättigung
nicstat
Dies ist das einzige Tool, das Ihnen eine dedizierte Spalte für die Netzwerksättigung zur Verfügung stellt, die aus verschiedenen Kernel-Statistiken als Fehler / Sekunde berechnet wird:

nicstat | awk ' {print $ 1 "" $ 10} '
Mit der -xOption erhalten Sie detailliertere Statistiken:

nicstat -x 
ip
Ein deutliches Zeichen für eine Netzwerksättigung sind Überlaufpakete. Auch eine hohe Anzahl verworfener Pakete kann Ihnen einen Hinweis geben. Beides kann mit dem ipBefehl mit -sOption und linkParameter angezeigt werden:

ip -s link show wlp1s0 | awk ' BEGIN {i = 999; j = 999} 
                      / ^ [1-9] / {print $ 2}; \ 
                      / RX / {printf "% s", "RX:"; i = (NR + 1)}; \ 
                      / TX / {printf "% s", "TX:"; j = (NR + 1)}; \ 
		       NR == i {printf "Abgelegt:% d Überlauf:% d \ n", $ 4, $ 5}; \ 
		       NR == j {printf "Abgelegt:% d", $ 4} ' 
sar
Diese Statistiken können auch gesammelt sasdund angezeigt werden von sar -n EDEV:

sar -n EDEV -s 19:30 -e 20:00 | awk ' NR> 2 {print $ 6 "" $ 7 "" $ 10 "" $ 11} '
ss
Mit sskönnen Sie die Anzahl der verworfenen Pakete pro Socket mit der Option -m(oder --memory) abrufen:

ss -tuam | Sed -E ' s / skmem [: / Dropped (] * d ([0-9] +).? [)]: \ 1 / g; 
                  s / \ b0 \ b / - / g; 
                  s / ([0-9] {1,3}) (. ([0-9] {1,3})) {3,3} /⌷⌷⌷.⌷⌷⌷.⌷⌷⌷.⌷⌷⌷ / g '  | \.
Kopf
Die sed~command in the snippet does (by line): 1 Extract the dropped packets from the output of the ~-mOption. 2 Ersetzen Sie Nullwerte durch '-', um eine bessere Übersicht zu erhalten. 3 Verstecken Sie die IP-Adressen aus Datenschutzgründen im Out.

/ proc / dev / net
Sie können die gleichen Ergebnisse aus dem /proc/Dateisystem erhalten:

cat / proc / net / dev | \.
awk ' NR == 1 {print $ 1 $ 2 "-" $ 4 "-"}; \ 
     NR == 2 {print $ 1 "RX-Drops RX-Overrun TX_drops RX-Overrun"}; \ 
     NR> 2 {print $ 1 $ 5 $ 6 $ 14 $ 15} '
/ sys / class / net / [Gerät] / Statistik
… Und aus dem sysDateisystem.

egrep ' [0-9] + ' / sys / class / net / * / statistics / *  | \.
egrep ' (drop | fifo) '  | & \
sed ' s |: | / | g ' | \.
awk -F ' / '  ' BEGIN {DEV = ""}; \ 
            DEV! = $ 5 {print $ 5 "-------------- ---"}; \ 
                      {print "*" $ 7 "" $ 8; DEV = $ 5} '  ; 
Die Daten werden in verschiedenen Dateien bereitgestellt (eine Datei pro Wert). Ich verwende egrephier, um die Daten hier zu extrahieren, da ich auf diese Weise auch den Dateinamen in der Ausgabe erhalte. Ich greife dann nach Dateinamen, die 'drop' (für verworfene Pakete) und 'fifo' (für fifo-Fehler) enthalten. Mit dem sedBefehl ersetze ich den Doppelpunkt, der egrepzwischen dem Dateinamen und dem Wert steht, durch einen Schrägstrich, der awkmit der -FOption dann als Spaltenbegrenzer für eine schöne und lesbare Ausgabe verwendet wird.

Error
ip
Der erste Blick auf Netzwerkfehler sollte ipmit der -sOption für Statistiken erfolgen. Achten Sie auf RX- und TX-Fehler.

ip -s link show wlp1s0 | awk ' BEGIN {i = 999} 
                / ^ [1-9] / {print $ 2}; \ 
                / RX / {printf "% s", "RX-Fehler:"; i = (NR + 1)}; \ 
                / TX / {printf "% s", "TX-Fehler:"; i = (NR + 1)}; \ 
		 NR == i {print $ 3} ' 
sar
Auch hier können Sie das swith Armeemesser der Überwachung verwenden: sar -n EDEVliefert Ihnen die gewünschten Informationen.

sar-n EDEV 1 1 | awk ' NR> 2 {print $ 1 "" $ 2 "" $ 3 "" $ 4} '
nicstat
Sie können die Informationen mit der -xOption in den Spalten 'IErr' und 'OErr' abrufen.

nicstat -x | awk ' {print $ 1 "" $ 6 "" $ 7} '
/ proc / dev / net
Und wieder ist das /proc/Dateisystem dein Freund ...

cat / proc / net / dev | \.
awk ' NR == 1 {print $ 1 $ 2 "" $ 4}; \ 
     NR == 2 {print $ 1 "RX_Errors TX_Errors"}; \ 
     NR> 2 {print $ 1 "" $ 4 "" $ 13} '
/ sys / class / net / [Gerät] / Statistik
… Wie das sysDateisystem.

egrep ' [0-9] + ' / sys / class / net / * / statistics / * _errors | \.
sed ' s /: / \ // '  | \.
awk -F ' / '  ' BEGIN {DEV = ""}; \ 
            DEV! = $ 5 {print $ 5 "-------------- ---"}; \ 
                      {print "*" $ 7 "" $ 8; DEV = $ 5} '  | \.
Kopf -14
iostat -xz 1 1 | awk ' NR == 6 {print $ 1 "" $ NF} 
                               NR> 6 && $ (NF)! = 0 && $ 0! = "" {print $ 1 "" $ NF} ' 
sar
Und wie fast immer können Sie die gleichen Informationen sarmit der -dOption und auch in der letzten Spalte erhalten.

sar -d -s 15:00 -e 15:30 | \.
awk ' NR == 3 {print $ 1 "" $ 2 "" $ NF}; 
     NR> 3 && $ NF! = 0 {print $ 1 "" $ 2 "" $ NF} '
iotop
Auf Prozessebene erhalten iotopSie die Informationen, die Sie benötigen. Das Tool ist im Allgemeinen interaktiv, kann jedoch im Batch-Modus ( -b) mit einer bestimmten Iteration ( -n) und Verzögerung ( -d) ausgeführt werden:

sudo iotop -ob -n 2 -d 1
pidstat
Ein anderes Tool ist pidstatmit einer -dOption ausgestattet, für die keine Root-Berechtigungen erforderlich sind:

pidstat -d | sed -n ' 3,9p '
Sättigung
iostat
Um die E / A-Sättigung zu überprüfen, benötigen wir die erweiterte Statistik ( -x). Wir sind nur an Geräten interessiert, die in der Abtastzeit E / A erzeugen ( -z). Ich empfehle die -hOption für eine von Menschen lesbare Ausgabe.

Wir sind an den Wartezeiten interessiert, die zu hoch gehen sollten. Unser Hauptinteresse sollte jedoch die durchschnittliche Warteschlangenlänge der E / A-Anforderung ( aqu-sz) sein, die niemals über 1 liegen sollte.

 \.
iostat -hxz 1 1 | \.
awk ' NR> 5 && $ 5! = 0 && NF> 3 {print $ 5 "" $ NF}; 
     NF == 3 && $ 1! = 0 {print $ 1 "" $ NF} ' | \.
grep -v Schleife
Die Ausgabe von iostatenthält 5 Datensatz. Im Snippet überspringe ich den ersten, etwa die durchschnittliche CPU-Auslastung ( NR > 5). Ich überprüfe die 2 Datensätze bei Lese-, Schreib- und Verwerfungsanforderung, die alle mehr als die 3 Spalten ( NF > 3) sind, und überprüfe, ob die Wartewerte in der 5. Spalte größer als 0 ( $5 > 0) sind, bevor dieser Wert und der Gerätename gedruckt werden Die letzte Spalte ( $NF). Finally I print the 1st and last column (~aqu-szund Device) aus dem letzten Datensatz, dh 3 Spalten breit ( NF == 3). Ich interessiere mich hier auch nicht für Loop-Geräte, also filtere ich das out ( grep -v).

sar
Und ja, Sie können dieselben Daten erhalten mit sar:

 \.
sar -hd -s 11:00 -e 11:20 | \.
awk ' ($ 7> 0 || $ 8> 0) && NR> 2 {print $ 1 "" $ 7 "" $ 8 "" $ NF} '
Fehler
smartctl
Die dedizierten Tools zum Auffinden von Speicher-E / A-Gerätefehlern sind smartctl. Es ist auf den meisten Distributionen nicht vorinstalliert. Sie können es mit der -l errorsOption aufrufen , und wenn Fehler gemeldet werden, können Sie einen tiefen Tauchgang mit -a(allen SMART-Informationen über die Festplatte) machen oder -xsogar Nicht-SMART-Informationen einschließen.

sudo smartctl -l Fehler / dev / sda
# + ERGEBNISSE [495e8a0f49313864cf0a9b294fadb9f134fbb229]:

smartctl 7.1 2019-12-30 r5022 [x86_64-linux-5.8.0-44-generic] (lokaler Build)
Copyright (C) 2002-19, Bruce Allen, Christian Franke, www.smartmontools.org

=== START DES LESENS SMART DATA ABSCHNITT ===
SMART Error Log Version: 1
Keine Fehler protokolliert
sys / device … / ioerr_cnt
Wenn Sie nicht smartctlinstalliert haben , erhalten Sie noch einige Informationen zu E / A-Fehlern im /sys/Dateisystem. Die Fehleranzahl wird als Hexadezimalzahl angegeben.

find / sys / device / -iname ' ioerr_cnt '  | \.
 xargs cat | sed ' s / 0x // '  | xargs echo  ' ibase = 16; '  | bc
# + ERGEBNISSE [997f0381c6310cf78bcd027dd5accc1699b3ae60]:

finden	sys / geräte	-iname	'ioerr_cnt'		\.									
xargs	Katze			sed	's / 0x //'			xargs	Echo	'ibase = 16;	'			bc
352														
Kapazität
Verwertung
df
Um einen Überblick über die Verwendung Ihrer Geräte zu erhalten, dfist dies die erste Wahl. Sie können es für den Menschen lesbar machen ( -h) und alle virtuellen Dateisysteme moderner Systeme ausschließen, um einen besseren Überblick zu erhalten ( -x…).

 \.
df -h -x tmpfs -x devtmpfs -x squashfs 
# + ERGEBNISSE [b15908347aafad08dd8e1017ed62763df20b7cad]:

\.						
df	-h	-x	tmpfs	-x	devtmpfs	-x	squashfs
Montiert	auf						
du
Sie können verwenden, duwenn ein Speicherlaufwerk für weitere Untersuchungen überfüllt ist.

 \.
du -d 1 -h | sort -h | sed -En ' / [0-9] G / p '  | \.
sed -E ' s | / [. a-zA-Z @] + | ******** | '
# + ERGEBNISSE [c6a2410f7cb29f7ab5399c588116b5535b6e7b06]:

\.													
du	-d	1	-h			Sortieren	-h			sed	-En	'/ [0-9] G / p'		\.
sed	-E	's	/[.a-zA-Z@‹+	********	'									
1.2G	. ********													
1,5 g	. ********													
1,6G	. ********													
1,7G	. ********													
1,9G	. ********													
2,4G	. ********													
2,5 g	. ********													
2,9G	. ********													
30G	. ********													
3,3G	. ********													
4,4G	. ********													
5,7G	. ********													
61G	0													
Sättigung
Tatsächlich werden Sie von Linux darüber informiert, wenn Ihnen der Speicherplatz ausgeht und wenn Sie dies wirklich tun, können Sie nicht mehr viel tun. In den meisten Fällen müssen Sie in den Rettungsmodus wechseln und zuerst einige Daten löschen, von denen Sie sicher sind, dass Sie sie nicht mehr benötigen, bevor Sie anhand der Speicherauslastung nach den Gründen suchen können.

Fehler
Ich weiß eigentlich nicht, nach welchen Fehlern Sie hier suchen könnten.
