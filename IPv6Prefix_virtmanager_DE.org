#+TITLE: IPv6-Pr√§fix-Delegation f√ºr Virtual Machine Manager
#+AUTHOR: Sebastian Meisel
#+DATE: <2025-06-18 Mi>
:HTML_PROPERTIES:
#+OPTIONS: num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="mystyle.css" />
:END:

#+ATTR_HTML: :width 100% :alt Das Ostseepinguin-Banner zeigt einen Ostsee-Pinguin am Strand.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 700
[[file:img/Ostseepinguin.png]]

#+NAME: toggle-mode-script
#+BEGIN_EXPORT HTML
<input type="checkbox" id="darkmode-toggle">
<label for="darkmode-toggle"></label></input>
<script src="script.js"></script>
#+END_EXPORT

#+begin_menu
[[file:IPv6Prefix_virtmanager.html][üá¨üáß EN]]
- > [[file:index.html][Startseite]]
- > [[file:IPv6PrefixDelegation_DE.html][IPv6-Pr√§fix-Delegation (Teil I)]]
--------

#+ATTR_HTML: :width 16px :alt Mastodon
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 20
[[file:img/Mastodon.png]] [[https://linuxrocks.online/@SebasTEAan]]

üìß [[mailto:sebastian.meisel+ostseepinguin@gmail.com][sebastian.meisel at gmail.com]]
#+end_menu

* Einf√ºhrung

Nachdem ich [[file:IPv6PrefixDelegation.html][IPv6 Pr√§fix-Delegation (~PD~) auf meinem Linux-Router]] eingerichtet habe, wurde mir klar, dass ich immer noch ein ~IPv6~-Subnetz f√ºr die virtuellen Maschinen (~VMs~) ben√∂tige, die ich auf meinem Desktop-PC betreibe.

Damit eine ~VM~ eine Adresse aus einem delegierten Pr√§fix erh√§lt, ben√∂tige ich eine Bridge-Schnittstelle mit einem verbundenen ~VLAN~ und eine M√∂glichkeit, den Pr√§fix an dieses Segment zu √ºbertragen. In dieser Anleitung verwende ich ~systemd-networkd~. Alternativen wie ~NetworkManager~ oder ~netplan~ k√∂nnen √§hnlich verwendet werden, aber der Fokus liegt hier auf deklarativen ~.network~- und ~.netdev~-Units.

Ich m√∂chte auch, dass das ~VLAN~ auf meinem physischen Switch konfiguriert wird, wobei die Adressen auf meinem Router zugewiesen werden. Mein Host-Computer funktioniert in diesem Szenario als Bridge, nicht als ~NAT~-Gateway oder Router. Auf diese Weise haben die ~VMs~ keinen Zugriff auf mein ~Office VLAN~, was mir zus√§tzliche Sicherheit bietet. Das ist besonders wichtig f√ºr mich, da eine der ~VMs~ eine Windows 11-Maschine ist, die ich als unsicher betrachte.

Am Ende soll mein Netzwerk so aussehen:

#+ATTR_HTML: :width 80% :alt: Links: Das Internet (als Wolke) ist √ºber Glasfaser mit einem Heimrouter verbunden. Von dort f√ºhrt eine Ethernet-Verbindung zu einem Switch, der mit einem Raspberry Pi verbunden ist, der als Router fungiert. Oben ist der Switch mit einem Wireless AP verbunden, der WiFi f√ºr verschiedene mobile Ger√§te im VLAN "WLAN" bereitstellt, das hellorange eingef√§rbt ist. Unten ist ein Desktop-PC mit dem Switch verbunden, der sich im VLAN "Office" befindet und hellviolett eingef√§rbt ist. Innerhalb dieses Office-PCs l√§uft eine virtuelle Maschine (VM), die selbst mit dem VLAN "VLAN VM" verbunden ist, dargestellt durch eine kleinere blaue Netzwerkschnittstellen-Box innerhalb des Office-PCs.
#+ATTR_LATEX: :width .65\linewidth
#+ATTR_ORG: :width 600
[[file:img/IPv6Network_virtmanager.png]]


* Hostnetzwerk konfigurieren

Zuerst konfiguriere ich die physische Ethernet-Schnittstelle in ~/etc/systemd/network/10-eth0.network~. Ich ordne das Ger√§t √ºber die ~MACAddress~ zu, anstatt √ºber den Namen, was Probleme mit der Namensgebung nach Neustarts oder BIOS-Updates vermeidet.

Erkl√§rung der wichtigsten Optionen:
- ~DHCP=yes~: aktiviert sowohl IPv4- als auch IPv6-DHCP.
- ~IPv6AcceptRA=yes~: erlaubt der Schnittstelle, Router-Advertisements (~RAs~) zu empfangen.
- ~IPv6SendRA=yes~: erm√∂glicht es dem System, ~RAs~ an untergeordnete Schnittstellen weiterzuleiten.
- ~IPv4Forwarding=~ und ~IPv6Forwarding=~: aktivieren die Paketweiterleitung.
- ~VLAN=~: bindet benannte VLAN-Schnittstellen an dieses physische Ger√§t.

#+BEGIN_SRC text :tangle files/10-eth0-host.network
[Match]
MACAddress=d8:bb:c1:8b:b9:d1
Type=ether

[Network]
Description=Physical Ethernet Port
DHCP=yes
IPv6AcceptRA=yes
IPv6SendRA=yes
#+END_SRC

Zur Sicherheit aktiviere ich auch die Weiterleitung:

#+BEGIN_SRC text :tangle files/10-eth0-host.network
IPv4Forwarding=yes
IPv6Forwarding=yes
#+END_SRC


Das ist auch der richtige Ort, um die ~VLANs~ einzubinden, die mit diesem Ger√§t verbunden sind ‚Äî in diesem Fall:

 1) ~Office~ f√ºr den Host und
 2) ~VM~ f√ºr die virtuellen Maschinen.

#+BEGIN_SRC text :tangle files/10-eth0-host.network
  VLAN=Office
  VLAN=VM
#+END_SRC

* VLAN 10: Host-Netzwerk

Ich m√∂chte das  ~Office VLAN~ f√ºr meinen Host verwenden, da es mein Office-PC ist, in ~/etc/systemd/network/00-vlan10.netdev~. Um es zu verwenden, muss ich zuerst ein virtuelles Netzwerk vom Typ (~Kind~) ~vlan~ definieren. Im ~[VLAN]~-Abschnitt muss ich die ~VLAN Id~ angeben.

#+NAME: 00-vlan10.netdev
#+BEGIN_SRC conf :tangle files/00-host-vlan10.netdev
  [NetDev]
  Name=Office
  Kind=vlan

  [VLAN]
  Id=10
#+END_SRC

Als n√§chstes muss ich es in ~/etc/systemd/network/20-vlan10.network~ konfigurieren. F√ºr die Adressierung verwende ich wieder ~DHCP~ und ~RA~ f√ºr ~IPv6~:

#+NAME: 20-vlan10.network
#+BEGIN_SRC conf :tangle files/20-host-vlan10.network
  [Match]
  Name=Office
  Type=vlan

  [Network]
  Description=Office VLAN interface
  DHCP=yes
  IPv6AcceptRA=yes
#+END_SRC

Das wird das Ger√§t sein, mit dem ich mich tats√§chlich auf meinem Host verbinde.

* VLAN 30: Bridge f√ºr VMs

Als n√§chstes ben√∂tige ich eine ~VLAN~-Schnittstelle f√ºr die virtuellen Maschinen:

#+NAME: 50-vlan20.netdev
#+BEGIN_SRC conf :tangle files/00-host-vlan30.netdev
  [NetDev]
  Name=VM
  Kind=vlan

  [VLAN]
  Id=30
  
#+END_SRC

* Bridge-Ger√§t (br30)

Und ich ben√∂tige ein Bridge-Ger√§t, mit dem sich die ~VMs~ verbinden k√∂nnen.
#+BEGIN_SRC conf :tangle files/00-host-br30.netdev
[NetDev]
Name=br30
Kind=bridge
#+END_SRC

* VLAN 30 an die Bridge anh√§ngen

Jetzt muss ich das Bridge-Ger√§t mit der virtuellen ~VLAN~-Schnittstelle verbinden, die ich ~VM~ genannt habe. Daf√ºr verwende ich die folgenden Optionen in ~/etc/systemd/network/20-vlan3.network~.:

- ~Bridge=br30~ verbindet diese VLAN-Schnittstelle mit der Bridge.
- ~IPv6AcceptRA=yes~ erm√∂glicht es, dass RA akzeptiert und an VMs weitergeleitet wird.
- ~LinkLocalAddressing=ipv6~ stellt sicher, dass IPv6-Link-Local-Adressen erzeugt werden.

#+BEGIN_SRC conf :tangle files/20-host-vlan30.network
  [Match]
  Name=VM
  Type=vlan

  [Network]
  Description=VM VLAN interface
  Bridge=br30
  IPv6AcceptRA=yes
  LinkLocalAddressing=ipv6
#+END_SRC

** Bridge-Schnittstellen-Konfiguration

Die Bridge selbst sollte transparent sein und nicht routen oder ~RA~ verwalten:

- ~IPv6AcceptRA=no~ verhindert, dass sich die Bridge selbst konfiguriert.
- ~IPv6SendRA=no~ verhindert, dass die Bridge Router-Ank√ºndigungen ausgibt.
- ~LinkLocalAddressing=kernel~ l√§sst den Kernel eine Link-Local-Adresse zuweisen.

#+NAME: 80-br30.network
#+BEGIN_SRC conf :tangle files/20-host-br30.network
  [Match]
  Name=br30

  [Network]
  BridgeForwardDelaySec=0
  IPv6AcceptRA=no
  IPv6SendRA=no
  LinkLocalAddressing=kernel

#+END_SRC

* Konfiguration der virtuellen Maschine

Verbinden Sie Ihre VM-Schnittstellen mit ~br30~ √ºber `virt-manager` oder XML: 

#+BEGIN_SRC xml :tangle files/network.xml
<interface type='bridge'>
  <source bridge='br30'/>
  <model type='virtio'/>
</interface>
#+END_SRC

#+ATTR_HTML: :width 50% :alt Screenshot der Netzwerkschnittstellen-Einstellungen einer virtuellen Maschine aus der Virt-Manager-GUI. Links zeigt ein vertikales Navigationsmen√º verschiedene Konfigurationsabschnitte einschlie√ülich "√úbersicht", "OS-Informationen", "CPUs", "Speicher", "NIC :e7:4c:6a" (aktuell ausgew√§hlt) und andere. Rechts ist der Details-Tab f√ºr die virtuelle Netzwerkschnittstelle ge√∂ffnet: Tab: "Details" (aktiv, neben "XML"); Netzwerkquelle: "Bridge-Ger√§t..."; Ger√§tename: br20; Ger√§temodell: virtio (Dropdown angezeigt); MAC-Adresse: 52:54:00:e7:4c:6a; IP-Adresse: "Unbekannt"; Link-Status: aktiv (Checkbox markiert).
#+ATTR_LATEX: :width .65\linewidth :placement [!htpb]
#+ATTR_ORG: :width 700
[[file:img/VirtManagerBridge.png]]

* VLAN 30 auf dem Router konfigurieren

Auf meinem Raspberry Pi-Router muss ich jetzt das neue ~VLAN 30~ f√ºr die ~VMs~ konfigurieren. Zuerst muss ich dort ~/etc/systemd/network/00-vlan30.netdev~ konfigurieren:

#+BEGIN_SRC text :tangle files 00-vlan30.netdev
[NetDev]
Name=VMs
Kind=vlan

[VLAN]
Id=30
#+END_SRC

Als n√§chstes kommt ~/etc/systemd/network/20-vlan30.network~:
#+BEGIN_SRC text :tangle files 20-vlan30.network
  [Match]
  Name=VMs
  Type=vlan
#+END_SRC

Im ~[Network]~-Abschnitt ben√∂tigen wir die folgenden Optionen:
- DHCP=ipv6 ::
  Aktiviert den DHCPv6-Client auf dieser Schnittstelle.
- IPv6SendRA=yes ::
  Das System sendet Router-Ank√ºndigungen (RA) auf dieser Schnittstelle.
- IPv6AcceptRA=yes ::
  Das System akzeptiert eingehende Router-Ank√ºndigungen.
- DHCPPrefixDelegation=yes ::
  Erm√∂glicht es der Schnittstelle, einen delegierten Pr√§fix √ºber DHCPv6 anzufordern.


  #+BEGIN_SRC text :tangle files 20-vlan30.network
  [Network]
  Description=VMs VLAN interface
  DHCP=ipv6
  IPv6SendRA=yes
  IPv6AcceptRA=yes
  DHCPPrefixDelegation=yes

#+END_SRC

F√ºr das Legacy-~IPv4~ verwenden wir einfach eine statische Adresse.

  #+BEGIN_SRC text :tangle files 20-vlan30.network
  [Address]
  Address=172.16.30.1/24

#+END_SRC

- Token=::1 ::
  Gibt das Interface-Identifier (IID)-Suffix an, das bei der Konstruktion der delegierten Adresse oder des Pr√§fixes verwendet werden soll. Dieser Wert wird an den delegierten Pr√§fix angeh√§ngt, um die vollst√§ndige IPv6-Adresse zu bilden. Zum Beispiel w√ºrde mit einem delegierten Pr√§fix `2001:db8:1234:567c:/62` und `Token=::1` die resultierende Adresse `2001:db8:1234:567c:1` lauten.
- SubnetId=0x2 ::
  Gibt eine hexadezimale Subnetz-ID an, die verwendet wird, um ein spezifisches /64-Subnetz aus dem delegierten Pr√§fix auszuw√§hlen. Zum Beispiel w√ºrde bei einem delegierten /62 die Einstellung `SubnetId=0x2` das dritte Netzwerk `2001:db8:1234:567e::/64` der Schnittstelle zuweisen.
- Assign=yes ::
  Gibt an, dass das ausgew√§hlte Subnetz (√ºber `SubnetId`) automatisch der Schnittstelle zugewiesen werden soll.
- Announce=yes ::
  Erm√∂glicht es dem System, den zugewiesenen Pr√§fix √ºber Router-Ank√ºndigungen (RA) zu verk√ºnden und ihn f√ºr andere Ger√§te im Link verf√ºgbar zu machen.


  #+BEGIN_SRC text :tangle files 20-vlan30.network
  [DHCPPrefixDelegation]
  Token=::1
  SubnetId=0x2
  Assign=yes
  Announce=yes

#+END_SRC

Schlie√ülich muss ich meinen Legacy-~DHCP~-Pool f√ºr das ~VMs VLAN~ in ~/etc/dnsmasq.d/00-vlans.conf~ einrichten:

- interface=VMs ::
  Bindet `dnsmasq` an die Netzwerkschnittstelle namens `VMs`. Es wird auf dieser Schnittstelle lauschen und DHCP bereitstellen.
  - dhcp-range=set:vlan30,172.16.30.10,172.16.30.200,255.255.255.0,24h ::
    Definiert einen DHCP-Adresspool f√ºr Clients, die mit `vlan30` getaggt sind. Der Bereich reicht von `172.16.30.10` bis `172.16.30.200`, mit einer Subnetzmaske von `255.255.255.0` und einer Lease-Dauer von 24 Stunden.
  - dhcp-option=tag:vlan30,option:router,192.168.178.254 ::
    Gibt das Standard-Gateway (Router) f√ºr DHCP-Clients an, die mit `vlan30` getaggt sind. Clients erhalten `192.168.178.254` als ihre Standardroute, was die ~WAN-Schnittstellen-IP~ meines Pi-Routers ist.
  - dhcp-option=tag:vlan30,option:dns-server,192.168.178.254 ::
    Setzt den DNS-Server f√ºr Clients, die mit `vlan30` getaggt sind, auf `192.168.178.254`. Dies wird als Teil des DHCP-Angebots gesendet.


#+BEGIN_SRC text
# DHCP f√ºr vlan-Schnittstellen
interface=WLAN
dhcp-range=set:vlan10,172.16.10.10,172.16.10.200,255.255.255.0,24h
dhcp-option=tag:vlan10,option:router,192.168.178.254
dhcp-option=tag:vlan10,option:dns-server,192.168.178.254

interface=Office
dhcp-range=set:vlan20,172.16.20.10,172.16.20.200,255.255.255.0,24h
dhcp-option=tag:vlan20,option:router,192.168.178.254
dhcp-option=tag:vlan20,option:dns-server,192.168.178.254

interface=VMs
dhcp-range=set:vlan30,172.16.30.10,172.16.30.200,255.255.255.0,24h
dhcp-option=tag:vlan30,option:router,192.168.178.254
dhcp-option=tag:vlan30,option:dns-server,192.168.178.254

#+END_SRC


* VLAN 30 auf dem Switch konfigurieren

Damit die gesamte Einrichtung funktioniert, muss ich auch das ~VLAN~ mit der ~Id 30~ auf dem verwalteten Switch erstellen. Wie das gemacht wird, h√§ngt nat√ºrlich von Ihrem Switch-Typ ab.

#+ATTR_HTML: :width 50% :alt Screenshot der VLAN-Konfigurationsseite auf einem Netgear S350 Smart Managed Pro Switch (Beispiel). Die Oberfl√§che listet VLANs mit ihren IDs, Namen und Typen auf. VLAN 30 namens "VMs" ist ausgew√§hlt und als Statisch (Static) eingestellt. Andere VLANs umfassen ID 1 (Standard), 2 (Auto-VoIP), 10 (Office), 20 (WLAN) und 4089 (Auto-Video). Der Benutzer befindet sich im Abschnitt "Switching" > "VLAN" > "VLAN-Konfiguration".
#+ATTR_LATEX: :width .65\linewidth :placement [!htpb]
#+ATTR_ORG: :width 700
[[file:img/VLAN30_Switch.png]]

Sie m√ºssen sicherstellen, dass die Schnittstelle, die mit dem Host-PC verbunden ist, als 'tagged' markiert ist und dass die ~VLAN 10~ und ~30~ mit dem Port verkn√ºpft sind. Sie m√ºssen auch ~VLAN 30~ mit dem Port zum Router verkn√ºpfen.

#+ATTR_HTML: :width 50% :alt Screenshot der "Port-PVID-Konfiguration"-Seite auf einem Netgear S350-Switch. Die Tabelle zeigt die port-basierte VLAN-Konfiguration. Ports, wo VLAN 30 konfiguriert ist: g1: PVID: 10, VLAN-Mitglied: 1,10,30, VLAN-Tag: 10,30; g6: PVID: 1, VLAN-Mitglied: 1,10,30, VLAN-Tag: 10,30. Andere Ports (g2 bis g5) sind keine Mitglieder von VLAN 30. Der aktive Abschnitt in der Seitenleiste ist Port-PVID-Konfiguration unter "Erweitert".
#+ATTR_LATEX: :width .65\linewidth :placement [!htpb]
#+ATTR_ORG: :width 700
[[file:img/PortKonfigurationSwitch.png]]

* Wechsel zu systemd-networkd
Auf meinem System lief bisher ~NetworkManager~, den ich jetzt durch ~systemd-networkd~ ersetzen m√∂chte, was ohnehin die bessere Wahl auf einem Desktop ohne ~WLAN~ ist. Das ist einfach zu bewerkstelligen, indem man folgendes ausf√ºhrt:
#+BEGIN_SRC bash
  sudo systemctl disable --now NetworkManager
  sydo systemctl enable --now systemd-networkd
#+END_SRC
Nur zur √úberpr√ºfung, dass keine Probleme aufgetreten sind:
#+Name: networkd-status
#+BEGIN_SRC bash :export both :results verbatim
  systemctl status systemd-networkd
#+END_SRC
Die Ausgabe sollte etwa so aussehen:

#+begin_example
‚óè systemd-networkd.service - Network Configuration
     Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; preset: disabled)
     Active: active (running) since Thu 2025-07-31 07:45:37 CEST; 2 days ago
 Invocation: 8fc13f7bd3854763a86c1eb8900269a7
TriggeredBy: ‚óè systemd-networkd.socket
       Docs: man:systemd-networkd.service(8)
             man:org.freedesktop.network1(5)
   Main PID: 1521 (systemd-network)
     Status: "Processing requests..."
      Tasks: 1 (limit: 19023)
   FD Store: 0 (limit: 512)
        CPU: 3.775s
     CGroup: /system.slice/systemd-networkd.service
             ‚îî‚îÄ1521 /usr/lib/systemd/systemd-networkd
Warning: some journal files were not opened due to insufficient permissions.
#+end_example
Und ich √ºberpr√ºfe auch, dass alle Ger√§te aktiv und konfiguriert sind:
#+Name: ipbrief
#+BEGIN_SRC bash :export both :results verbatim :eval no-export
  ip --brief a 
#+END_SRC
Nur die ~Office~ Schnittstelle sollte eine Globale Unicast IPv6-Adresse (~GUA~) erhalten.

#+begin_example
lo               UNKNOWN        127.0.0.1/8 ::1/128 
enp0s16f0u1      UP             172.16.10.154/24 metric 1024 fe80::dabb:c1ff:fe8b:b9d1/64 
br30             UP             fe80::84d9:45ff:fe20:bb32/64 
Office@enp0s16f0u1 UP             172.16.10.155/24 metric 1024 3fff:abc:def:bf0c:dabb:c1ff:fe8b:b9d1/64 fe80::dabb:c1ff:fe8b:b9d1/64 
VM@enp0s16f0u1   UP             fe80::dabb:c1ff:fe8b:b9d1/64 
#+end_example

* Filterung f√ºr das Bridge-Ger√§t deaktivieren

Bis zu diesem Punkt funktioniert alles sehr unkompliziert. Aber als ich versuchte, mich mit dem Netzwerk zu verbinden, bekam ich keine Adresse. Es hat mich ziemlich viel Zeit gekostet, das Problem zu finden und zu l√∂sen.

Das Problem ist, dass das Standardverhalten unter Linux darin besteht, dass einige Pakete sowohl auf Layer 3 als auch auf Layer 2 gefiltert werden. Da wir den Host als reine Bridge zu den virtuellen Maschinen verwenden, ist das nicht erw√ºnscht. Also m√ºssen wir dieses Verhalten f√ºr Bridge-Ger√§te deaktivieren:

~/etc/sysctl.d/bridge.conf~
#+BEGIN_SRC text :tangle files/99-bridge.rules
net.bridge.bridge-nf-call-ip6tables=0
net.bridge.bridge-nf-call-iptables=0
net.bridge.bridge-nf-call-arptables=0
#+END_SRC

Das w√ºrde jedoch nur nach einem Systemneustart wirksam werden, au√üer Sie lesen die Datei mit ~sysctl~:

#+BEGIN_SRC bash
sudo sysctl -f /etc/sysctl.d/99-bridge.conf
#+END_SRC

* Fazit

Wenn Sie die zu setzenden Optionen kennen, ist es sehr einfach, ein dediziertes VLAN von Ihrem Router direkt zu Ihren ~VMs~ einzurichten. Es gibt nat√ºrlich noch zwei weitere Dinge zu beachten:

- Sie k√∂nnen ~Wifi~-Schnittstellen nicht einfach mit einer Bridge √ºberbr√ºcken.
- Ihre ~VMs~ befinden sich in einem separaten Subnetz, sodass Sie nicht einfach per ~ssh~ auf sie zugreifen k√∂nnen. Es gibt mehrere m√∂gliche L√∂sungen daf√ºr:
  - Dedizierte Weiterleitungsregeln mit ~nftables~.
  - Verwenden Sie [[https://tailscale.com/][tailscale]] oder [[https://github.com/slackhq/nebula][nebula]].
  - Meine bevorzugte Methode ist jedoch ein Proxy-Jump √ºber meinen Pi-Router. In ~${HOME}/.ssh/config~ sieht das so aus:

#+BEGIN_SRC text :tangle files/ssh_config
  Host Win Windows Window11 Windoof win
       HostName	       fe80::d8b8:3a7:126b:162b%%VMs
       User             Username
       IdentityFile	~/.ssh/win
       ProxyJump         pi
  Host *
      IdentitiesOnly      yes

#+END_SRC

- Host Win Windows Window11 Windoof win ::
  Definiert eine Gruppe von Host-Aliasen. Sie k√∂nnen jeden dieser Namen (`Win`, `Windows`, etc.) mit `ssh` verwenden, und die unten stehenden Einstellungen werden angewendet.
  - HostName fe80::d8b8:3a7:126b:162b%%VMs ::
    Gibt den tats√§chlichen Ziel-Host an. In diesem Fall ist es eine Link-Local-IPv6-Adresse mit dem Zonen-Index `%%VMs` (der Schnittstellenname, der f√ºr Link-Local-Kommunikation ben√∂tigt wird).
  - User Username ::
    Setzt den SSH-Benutzernamen f√ºr diesen Host auf `Username`.
  - IdentityFile ~/.ssh/win ::
    Gibt die private SSH-Schl√ºsseldatei an, die beim Verbinden zu diesem Host verwendet werden soll.
  - ProxyJump pi ::
    Verwendet den Host-Alias `pi` als Jump-Host (SSH-Proxy). SSH wird sich zuerst mit `pi` verbinden und ihn dann verwenden, um die Windows-Maschine zu erreichen.
- Host * ::
  Ein Platzhalter-Match f√ºr alle Hosts, die nicht explizit oben aufgelistet sind.
  - IdentitiesOnly yes ::
    Stellt sicher, dass nur die explizit in der Konfiguration angegebenen Identit√§tsdateien (z.B. `~/.ssh/win`) f√ºr die Authentifizierung verwendet werden, und verhindert, dass SSH andere im Agent geladene Schl√ºssel ausprobiert.


# Local Variables:
# jinx-languages: "de_DE"
# End:
